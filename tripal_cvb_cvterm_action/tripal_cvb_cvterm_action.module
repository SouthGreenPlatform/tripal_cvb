<?php
/**
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.module/group/field/7.x
 */

/**
 * Implements hook_field_info().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_info/7.x
 */
function tripal_cvb_cvterm_action_field_info() {
  return array(
    'tripal_cvb_cvterm_action' => array(
      'label' => t('CV term action'),
      'description' => t('This field stores action settings in the database.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'tripal_cvb_cvterm_action_setup',
      'default_formatter' => 'tripal_cvb_cvterm_action_overview',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_validate/7.x
 */
function tripal_cvb_cvterm_action_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    //+FIXME: add stuff
    if (!empty($item['action'])) {
      if (!preg_match('/^[\w]+$/', $item['action'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'tripal_cvb_cvterm_action_invalid',
          'message' => t('Invalid action.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_is_empty/7.x
 */
function tripal_cvb_cvterm_action_field_is_empty($item, $field) {
  return empty($item['action']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_formatter_info/7.x
 */
function tripal_cvb_cvterm_action_field_formatter_info() {
  return array(
    'tripal_cvb_cvterm_action_overview' => array(
      'label' => t('Default'),
      'field types' => array('tripal_cvb_cvterm_action'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_formatter_view/7.x
 */
function tripal_cvb_cvterm_action_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
// drupal_set_message('DEBUG view: ' . print_r($field, TRUE) . ': ' . print_r($instance, TRUE) . ': ' . print_r($items, TRUE)); //+debug
  $element = array();

  switch ($display['type']) {
    case 'tripal_cvb_cvterm_action_overview':
      $rows = array();
      foreach ($items as $delta => $item) {
        $target_type = $target_id = '';
        if (preg_match('/(\w+):(.+)/', $item['target'], $match)) {
          $target_type = $match[1];
          $target_id = $match[2];
        }

        $row = array(
          $delta,
          $item['type'],
          $item['action'],
          $item['title'],
          $item['autorun'] ? t('yes') : t('no'),
          $target_type,
          $target_id,
          $item['insert'],
        );
        $rows[] = $row;
      }
      $element[0] = array(
        '#theme' => 'table',
        '#header' => array(
          t('Delta'),
          t('Type'),
          t('Action'),
          t('Label'),
          t('Autorun'),
          t('Target type'),
          t('Target identifier'),
          t('Insertion'),
        ),
        '#rows' => $rows,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_widget_info/7.x
 */
function tripal_cvb_cvterm_action_field_widget_info() {
  return array(
    'tripal_cvb_cvterm_action_setup' => array(
      'label' => t('CV term action'),
      'description' => t('Manages CV term action seetings.'),
      'field types' => array('tripal_cvb_cvterm_action'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * @see https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_form/7.x
 */
function tripal_cvb_cvterm_action_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
// drupal_set_message('DEBUG widgetf: ' . print_r($element, TRUE)); //+debug
  // Get previous values.
  $type = isset($items[$delta]['type']) ? $items[$delta]['type'] : 'view';
  $action = isset($items[$delta]['action']) ? $items[$delta]['action'] : '';
  $title = isset($items[$delta]['title']) ? $items[$delta]['title'] : '';
  $autorun = isset($items[$delta]['autorun']) ? $items[$delta]['autorun'] : FALSE;
  $insertion = isset($items[$delta]['insert']) ? $items[$delta]['insert'] : '';

  $target_options = array(
    'term' => t('Term line'),
    'region' => t('Theme region'),
    'dom'  => t('DOM object identifier'),
  );
  $target_type = 'term';
  $target_id = '';
  $target = isset($items[$delta]['target']) ? $items[$delta]['target'] : '';
  if (preg_match('/(' . implode('|', array_keys($target_options)) . '):(.+)/', $target, $match)) {
    $target_type = $match[1];
    $target_id = $match[2];
  }

  $element['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'tripal_cvb_cvterm_action_setup':
      $element += array(
        '#type' => 'fieldset',
        '#element_validate' => array('tripal_cvb_action_element_validate'),
        '#delta' => $delta,
        // '#attached' => array(
        //   'css' => array(drupal_get_path('module', 'tripal_cvb') . '/theme/css/tripal_cvb.css'),
        // ),
      );

      $element['type'] = array(
        '#type' => 'select',
        '#title' => t('Type'),
        '#options' => array(
          'view' => t('View'),
          'path' => t('Path'),
          'url'  => t('External URL'),
          'js'   => t('Javascript'),
        ),
        '#default_value' => $type,
        '#description' => t('Sets the action type.'),
        '#required' => 1,
      );

      $element['action'] = array(
        '#type' => 'textfield',
        '#title' => t('Action'),
        '#size' => 16,
        '#default_value' => $action,
        '#description' => t('Action to use.'),
        '#required' => 0,
      );

      $element['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Link label'),
        '#size' => 16,
        '#default_value' => $title,
        '#description' => t('Label of the action link to display.'),
        '#required' => 0,
      );

      $element['autorun'] = array(
        '#type' => 'checkbox',
        '#title' => t('Auto-run action'),
        '#default_value' => $autorun,
        '#description' => t('Auto-run action when the term is displayed.'),
        '#required' => 0,
      );

      $element['target'] = array(
        '#type' => 'hidden',
        '#default_value' => $target,
      );

      $element['target_type'] = array(
        '#type' => 'select',
        '#title' => t('Target type'),
        '#options' => $target_options,
        '#default_value' => $target_type,
        '#description' => t('Sets where to display the output.'),
        '#required' => 0,
      );

      $element['target_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Target identifier'),
        '#size' => 16,
        '#default_value' => $target_id,
        '#description' => t('Sets where to display the output.'),
        '#required' => 0,
      );

      $element['insert'] = array(
        '#type' => 'select',
        '#title' => t('Insertion'),
        '#options' => array(
          'append' => t('Append'),
          'replace' => t('Replace'),
        ),
        '#default_value' => $insertion,
        '#description' => t('Sets where to display the output.'),
        '#required' => 0,
      );

      break;
  }

  return $element;
}

/**
 * Validate the individual fields and then convert to action string.
 */
function tripal_cvb_action_element_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['action'])) {
    $value = $form_state['values'][$field_name][$element['#language']][$delta]['action'];

    // If they left any empty, we'll set the value empty and quit.
    if (strlen($value) == 0) {
      form_set_value($element, NULL, $form_state);
      return;
    }
    if (strlen($value) < 2) {
      form_error($element['action'], t("Invalid action value."));
    }
  }

  // save target
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['target_type'])
      && isset($form_state['values'][$field_name][$element['#language']][$delta]['target_id'])) {
    $value =
      $form_state['values'][$field_name][$element['#language']][$delta]['target_type']
      . ':'
      . $form_state['values'][$field_name][$element['#language']][$delta]['target_id'];
      $target = array(
        '#parents' => array(
          'tripal_cvb_cvterm_action',
          $element['#language'],
          $delta,
          'target',
        )
      );
      form_set_value($target, $value, $form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_widget_error/7.x
 */
function tripal_cvb_cvterm_action_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'tripal_cvb_cvterm_action_invalid':
      form_error($element, $error['message']);
      break;
  }
}
