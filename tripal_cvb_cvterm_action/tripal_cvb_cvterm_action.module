<?php
/**
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.module/group/field/7.x
 */

/**
 * Implements hook_field_info().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_widget_info/7.x
 */
function tripal_cvb_cvterm_action_field_info() {
  return array(
    'tripal_cvb_cvterm_action' => array(
      'label' => t('CV term action'),
      'description' => t('This field stores action settings in the database.'),
      'settings' => array(),
      'instance_settings' => array(
        'type' => 'view',
        'action' => '',
        'title' => '',
        'autorun' => FALSE,
        'target' => '',
        'insertion' => 'append',
      ),
      'default_widget' => 'tripal_cvb_cvterm_action_setup',
      'default_formatter' => 'tripal_cvb_cvterm_action_overview',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function tripal_cvb_cvterm_action_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['action'])) {
      if (!preg_match('/^[\w]+$/', $item['action'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'tripal_cvb_cvterm_action_invalid',
          'message' => t('Invalid action.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function tripal_cvb_cvterm_action_field_is_empty($item, $field) {
  return empty($item['action']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_formatter_info/7.x
 */
function tripal_cvb_cvterm_action_field_formatter_info() {
  return array(
    'tripal_cvb_cvterm_action_overview' => array(
      'label' => t('Default'),
      'field types' => array('tripal_cvb_cvterm_action'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_formatter_view/7.x
 */
function tripal_cvb_cvterm_action_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'tripal_cvb_cvterm_action_overview':
      $rows = array();
      foreach ($items as $delta => $item) {
        $rows[] = array($delta, $item['value']);
      }
      $element[0] = array(
        '#theme' => 'table',
        '#header' => array(t('Delta'), t('Value')),
        '#rows' => $rows,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see https://api.drupal.org/api/drupal/modules%21field%21field.api.php/function/hook_field_widget_info/7.x
 */
function tripal_cvb_cvterm_action_field_widget_info() {
  return array(
    'tripal_cvb_cvterm_action_setup' => array(
      'label' => t('CV term action'),
      'description' => t('Manages CV term action seetings.'),
      'field types' => array('tripal_cvb_cvterm_action'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function tripal_cvb_cvterm_action_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['rgb']) ? $items[$delta]['rgb'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'tripal_cvb_cvterm_action_setup':
      $widget += array(
        '#type' => 'fieldset',
        '#element_validate' => array('tripal_cvb_action_validate'),
        '#delta' => $delta,
        // '#attached' => array(
        //   'css' => array(drupal_get_path('module', 'tripal_cvb') . '/theme/css/tripal_cvb.css'),
        // ),
      );

      $widget['action'] = array(
        '#type' => 'textfield',
        '#title' => t('Action'),
        '#size' => 16,
        '#default_value' => '',
        // '#attributes' => array('class' => array('rgb-entry')),
        '#description' => t('Action to perform.'),
        '#required' => 1,
      );
      break;

  }

  $element['tripal_cvb_cvterm_action'] = $widget;
  return $element;
}

/**
 * Validate the individual fields and then convert to RGB string.
 */
function tripal_cvb_action_validate($element, &$form_state) {
  /*
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['rgb'])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta]['rgb'];
    foreach (array('r', 'g', 'b') as $colorfield) {
      $colorfield_value = hexdec($values[$colorfield]);
      // If they left any empty, we'll set the value empty and quit.
      if (strlen($values[$colorfield]) == 0) {
        form_set_value($element, '', $form_state);
        return;
      }
      // If they gave us anything that's not hex, reject it.
      if ((strlen($values[$colorfield]) != 2) || $colorfield_value < 0 || $colorfield_value > 255) {
        form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
      }
    }

    $value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
    form_set_value($element, $value, $form_state);
  }
  */
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see field_example_field_validate()
 * @see form_error()
 */
function tripal_cvb_cvterm_action_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'tripal_cvb_cvterm_action_invalid':
      form_error($element, $error['message']);
      break;
  }
}

